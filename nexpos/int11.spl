alias currPID R1;
alias userSP R2;
alias syscall R3;
alias procTab R4;
currPID = [SYSTEM_STATUS_TABLE + 5*CORE + 1];
procTab = PROCESS_TABLE + currPID*16;
userSP = SP;

[procTab + 13] = SP;
SP = [procTab + 11]*512 -1;

syscall = [[PTBR + 2*(userSP-5)/512]*512 + (userSP-5)%512];
[procTab + 9] = syscall;

if(syscall == 13) then
  alias pid R5;
  pid = [[PTBR + 2*(userSP-4)/512]*512 + (userSP-4)%512];
  breakpoint;
  if(pid == currPID || [PROCESS_TABLE + pid*16 + 4] == TERMINATED || pid<1 || pid>15) then
    [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = -1; 
//    [procTab + 9] = 0;
    SP = [procTab + 13];
    ireturn;
  endif;
  
  [procTab + 4] = WAIT_PROCESS;
  [procTab + 5] = pid;
  
  multipush(R1, R2, R3, R4, R5);
  call MOD_5;
  multipop(R1, R2, R3, R4, R5);
  [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = 0;
//  [procTab + 9] = 0;
  SP = [procTab + 13];
  ireturn;
endif;

if(syscall == 14) then
  multipush(R1);
  R1 = ACQUIRE_KERN_LOCK;
  call ACCESS_CONTROL;
  multipop(R1);
  alias i R5;
  i = 1;
  while(i<MAX_PROC_NUM) do
    if([PROCESS_TABLE + 16*i + 4] == WAIT_PROCESS && [PROCESS_TABLE + 16*i + 5] == currPID) then
      [PROCESS_TABLE + 16*i + 4] = READY;
    endif;
  endwhile; 
  R1 = RELEASE_LOCK;
  R2 = KERN_LOCK;
  call ACCESS_CONTROL;
  ireturn;
endif;


if(syscall == 11) then
  [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = currPID;
//  [procTab + 9] = 0;
  SP = [procTab + 13];
  ireturn;
endif;

if(syscall == 12) then
  [[PTBR + 2*(userSP-1)/512]*512 + (userSP-1)%512] = [procTab + 2];
//  [procTab + 9] = 0;
  SP = [procTab + 13];
  ireturn;
endif;

