alias userSP R1;
userSP = SP;

alias currentPID R2;
currentPID = [SYSTEM_STATUS_TABLE + 5*CORE +1];

alias process_table R3;
process_table = PROCESS_TABLE + currentPID*16;

[process_table + 13] = userSP;
SP = [process_table + 11]*512 - 1;

breakpoint;
[process_table + 9] = 9;

multipush(R1, R2, R3);
R1 = ACQUIRE_KERN_LOCK;
call ACCESS_CONTROL;
multipop(R1, R2, R3);




alias fileName R4;

fileName = [[PTBR + 2*((userSP-4) / 512)]*512 + ((userSP-4)%512)];

alias inodeEntry R5;
alias flag R6;
inodeEntry = 0;
flag = 0;
while(inodeEntry < MAX_FILE_NUM) do
	if(fileName == [INODE_TABLE + inodeEntry*16 + 1]) then
		if([INODE_TABLE + inodeEntry*16 + 0] == EXEC) then
			flag = 1;
			break;
		endif;
	endif;
	inodeEntry = inodeEntry + 1;
endwhile;

if(flag == 0) then
	[[PTBR + 2*((userSP-1) / 512)]*512 + ((userSP-1)%512)] = -1;

	
  	multipush(R1, R2, R3, R4, R5);
	R1 = RELEASE_LOCK;
	R2 = KERN_LOCK;
	call ACCESS_CONTROL;
	multipop(R1, R2, R3, R4, R5);

//	[process_table + 9] = 0;
	SP = userSP;
	ireturn;
endif;

multipush(R1, R2, R3, R4, R5);
R2 = currentPID;
R1 = 3;
call MOD_1;

multipop(R1, R2, R3, R4, R5);

alias userAreaPage R6;
userAreaPage = [process_table + 11];
[MEMORY_FREE_LIST + userAreaPage] = [MEMORY_FREE_LIST + userAreaPage] + 1;
[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;

SP = userAreaPage * 512;

alias i R7;
//  per process res table
i = 0;
while(i<8) do
	[([PROCESS_TABLE + currentPID*16 + 11]) *512 + RESOURCE_TABLE_OFFSET +  2*i] = -1;
i = i + 1;
endwhile;

[process_table + 4] = RUNNING;
[process_table + 7] = inodeEntry;

alias st1 R8;
alias st2 R9;

multipush(R1, R2, R3, R4, R5, R6);

R1 = GET_FREE_PAGE;
call MOD_2;
st1 = R0;
multipush(R7);
R1 = GET_FREE_PAGE;
call MOD_2;
st2 = R0;
multipop(R7);
multipop(R1, R2, R3, R4, R5, R6);

alias nBlocks R10;

nBlocks = (([INODE_TABLE + 16*inodeEntry + 2]-1) /512) + 1;

multipush(R1, R2, R3, R4, R5, R6, R8, R9, R10);
R1 = GET_CODE_PAGE;
R2 = [INODE_TABLE + inodeEntry*16 + 8];
call MOD_2;
multipop(R1, R2, R3, R4, R5, R6, R8, R9, R10);

[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

// Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";

[PTBR+6] = -1;
[PTBR+7] = "0000";


// Code
[PTBR + 8] = R0;
[PTBR + 9] = "0100";

// Stack
[PTBR+16] = st1;
[PTBR+17] = "0110";
[PTBR+18] = st2;
[PTBR+19] = "0110";

i=1;
while(i<4) do
	[PTBR + 8 + 2*i] = -1;
	[PTBR + 9 + 2*i] = "0000";
i = i + 1;
endwhile;

// Initialize Disk Map Table
i=2;
while(i<10) do
if(i==2 || i==3) then // Heap
	[DISK_MAP_TABLE + currentPID*10 + i] = -1;
else
if(i==8 || i==9) then // Stack
	[DISK_MAP_TABLE + currentPID*10 + i] = -1;
else
breakpoint;
if((i-4)<nBlocks) then // Code
	[DISK_MAP_TABLE + currentPID*10  + i] = [INODE_TABLE + inodeEntry*16 + 8 + (i-4)];

else
	[DISK_MAP_TABLE + currentPID*10 + i] = -1;
endif;
endif;
endif;
i = i + 1;
endwhile;

//i=0;
//while(i<nBlocks) do
//	multipush(R0, R1, R2, R3, R4, R5);
//	R2 = R1;
//	R1 = 2;
//	R3 = [PTBR+8+2*i];
//	R4 = [INODE_TABLE + inodeEntry*16 + 8 + i];
//	breakpoint;
//	call MOD_4;
//	multipop(R0, R1, R2, R3, R4, R5);	
//i = i + 1;
//endwhile;




[[PTBR + 16]*512] = [[PTBR+8]*512+ 1];


  multipush(R0, R1, R2, R3);
  R1 = RELEASE_LOCK;
  R2 = KERN_LOCK;
  call ACCESS_CONTROL;
  multipop(R0, R1, R2, R3);

SP = 8*512;
//[process_table + 9] = 0;
ireturn;
